// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  points        Int           @default(0)
  streak        Int           @default(0)
  progress      Progress[]
  gameProgress  GameProgress[]
  chatHistory   ChatMessage[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Progress {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  moduleId  String   @map("module_id")
  lessonId  String   @map("lesson_id")
  completed Boolean  @default(false)
  score     Int      @default(0)
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId, lessonId])
  @@map("progress")
}

model GameProgress {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  gameId     String   @map("game_id")
  progress   Int      @default(0)
  score      Int      @default(0)
  completed  Boolean  @default(false)
  lastPlayed DateTime @default(now()) @map("last_played")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@map("game_progress")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  content   String   @db.Text
  role      String
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("chat_messages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
